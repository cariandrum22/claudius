name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with tmate debugging'
        required: false
        default: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CLAUDIUS_TEST_MOCK_OP: 1  # Always use mocks in CI

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job for caching and environment preparation
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      rust-cache-key: ${{ steps.cache-keys.outputs.rust }}
      cargo-cache-key: ${{ steps.cache-keys.outputs.cargo }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For proper git history

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "rust=${{ runner.os }}-rust-${{ hashFiles('rust-toolchain.toml', 'Cargo.lock') }}" >> $GITHUB_OUTPUT
          echo "cargo=${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}" >> $GITHUB_OUTPUT

  # Comprehensive test job with matrix
  test:
    name: Test on ${{ matrix.os }} with Rust ${{ matrix.rust }}
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, "1.86.0"]  # Test both stable and MSRV
        exclude:
          # Skip Windows with specific Rust version due to compatibility
          - os: windows-latest
            rust: "1.86.0"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.setup.outputs.cargo-cache-key }}-${{ matrix.rust }}
          restore-keys: |
            ${{ needs.setup.outputs.cargo-cache-key }}-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.rust }}-

      - name: Run tests
        run: cargo test --all-features --workspace
        env:
          RUST_TEST_THREADS: 4

      - name: Run doc tests
        run: cargo test --doc --all-features

  # Code coverage job
  coverage:
    name: Code Coverage
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.setup.outputs.cargo-cache-key }}-stable
          restore-keys: |
            ${{ needs.setup.outputs.cargo-cache-key }}-

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info
          fail_ci_if_error: false

  # Security audit job
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run security audit
        run: cargo audit
        continue-on-error: true

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Check dependencies
        run: cargo deny check
        continue-on-error: true

  # Build job for release artifacts
  build:
    name: Build Release
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claudius-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/claudius${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 7

  # Nix flake check
  nix-check:
    name: Nix Flake Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      - name: Check flake
        run: nix flake check

      - name: Build with Nix
        run: nix build

      - name: Run tests in Nix shell
        run: nix develop --command cargo test

  # Final status check
  status-check:
    name: CI Status Check
    if: always()
    needs: [test, coverage, security, build, nix-check]
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.test.result }}" != "success" ]] ||
             [[ "${{ needs.coverage.result }}" != "success" ]] ||
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All required jobs passed successfully"

  # Optional debug session
  debug:
    name: Debug Session
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
